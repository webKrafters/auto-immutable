{"version":3,"file":"component---src-pages-api-method-set-tags-clear-usage-tsx-802285f4741c216853f7.js","mappings":"+MA8FA,UAhBuDA,IAAA,IAAC,UAAEC,GAAW,SAClEC,EAAAA,cAAAA,UAAAA,CAASD,UAAa,iCAAiCA,KAClDC,EAAAA,cAAAA,KAAAA,KAAI,qBACJA,EAAAA,cAAAA,SAAAA,KAAQ,gBACN,IACFA,EAAAA,cAAAA,OAAAA,KAAM,aACNA,EAAAA,cAAAA,IAAAA,KAAK,IAAK,KACVA,EAAAA,cAAAA,SAAAA,KAAQ,gBACRA,EAAAA,cAAAA,MAAAA,KACO,qDAEPA,EAAAA,cAAAA,KAAAA,KAAI,YACJA,EAAAA,cAACC,EAAAA,EAAS,KA/EjB,0/CAgFa,EAKP,MAAMC,EAAgB,IACzBF,EAAAA,cAAAA,QAAAA,KAASG,EAAAA,QAASC,MAAO,Y","sources":["webpack://auto-immutable-docs/./src/pages/api/method/set/tags/clear-usage.tsx"],"sourcesContent":["import type { HeadFC } from 'gatsby';\n\nimport type { PageProps } from '../../../../../page-context';\n\nimport React from 'react';\n\nimport metadata from '../../../../../../gatsby-config/metadata';\n\nimport CodeBlock from '../../../../../partials/code-block';\n\nconst SAMPLE =\n`import AutoImmutable, { Tag } from 'auto-immutable';\n\nconst protectedData = {\n    a: {\n        b: [\n            { x: 7, y: 8, z: 9 },\n            { x: 17, y: 18, z: 19 }\n        ]\n    },\n    j: 10\n};\n\nconst aImmutable = new AutoImmutable( protectedData );\nconst consumer = aImmutable.connect();\n\n/* empties aImmutable data; sets aImmutable data = {} */\nconsumer.set( Tag.CLEAR )\n// or consumer.set({ [ Tag.CLEAR ]: <anything> })\n\n\n//  empties the value at aImmutable data.a.b;\n//  sets aImmutable data.a.b = []\nconsumer.set({\n    a: {\n        b: Tag.CLEAR // or { [ Tag.CLEAR ]: <anything> }\n    }\n});\n\n\n//  empties the value at aImmutable data.a.j;\n//  sets aImmutable data.a.j = null\nconsumer.set({\n    a: {\n        j: Tag.CLEAR // or { [ Tag.CLEAR ]: <anything> }\n    }\n});\n\n//  empties the value at aImmutable data.a.b[ 0 ];\n//  sets aImmutable data.a.b = [{}]\nconsumer.set({\n    a: {\n        b: [ Tag.CLEAR ] // or { [ Tag.CLEAR ]: <anything> }\n    }\n});\n\n//  empties the value at aImmutable data.a.b[0];\n//  sets aImmutable data.a.b = [{}, aImmutable data.a.b[1]]\nconsumer.set({\n    a: {\n        b: [\n            Tag.CLEAR, // or { [ Tag.CLEAR ]: <anything> }\n            aImmutable data.a.b[1]\n        ]\n    }\n});\n\n// empties the value at aImmutable data.a.b[0];\n// sets aImmutable data.a.b = [{}, a.b[1]]\n// uses indexing (RECOMMENDED)\nconsumer.set({\n    a: {\n        b: {\n            0: Tag.CLEAR // or { [ Tag.CLEAR ]: <anything> }\n        }\n    }\n});`;\n\nconst SetMethodApiClearTagPage : React.FC<PageProps> = ({ className }) => (\n   <article className={ `set-method-api-clear-tag-page ${ className }` }>\n        <h1>@@CLEAR Tag Usage</h1>\n        <strong>Signature 1:</strong>\n        { ' ' }\n        <code>'@@CLEAR'</code>\n        <p>{ ' ' } </p>\n        <strong>Signature 2:</strong>\n        <pre>\n            { `{ '@@CLEAR': <any> }; // the value has no effect.` }\n        </pre>\n        <h4>Example:</h4>\n        <CodeBlock>{ SAMPLE }</CodeBlock>\n    </article>\n);\n\nexport default SetMethodApiClearTagPage;\n\nexport const Head : HeadFC = () => (\n    <title>{ metadata.title }: @@CLEAR</title>\n);"],"names":["_ref","className","React","CodeBlock","Head","metadata","title"],"sourceRoot":""}