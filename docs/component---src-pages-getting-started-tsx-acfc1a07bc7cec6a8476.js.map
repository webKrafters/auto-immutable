{"version":3,"file":"component---src-pages-getting-started-tsx-acfc1a07bc7cec6a8476.js","mappings":"mMAeA,UAPiDA,IAAA,IAAC,UAAEC,GAAW,SAC3DC,EAAAA,cAAAA,UAAAA,CAASD,UAAa,wBAAwBA,KAC1CC,EAAAA,cAAAA,KAAAA,KAAI,mBACJA,EAAAA,cAACC,EAAAA,EAAS,MACJ,EAKP,MAAMC,EAAgB,IACzBF,EAAAA,cAAAA,QAAAA,KAAO,kB,6FCXX,MA+CMG,EAGDL,IAAAA,IAAC,SAAEM,KAAaC,GAAO,SACxBL,EAAAA,cAAAA,SAAaK,EACPD,EACG,EAGbD,EAAOG,YAAc,mBAErB,MAAML,EAA8CM,IAAAA,IAAC,UAAER,GAAW,SAC9DC,EAAAA,cAAAA,UAAAA,CAASD,UAAa,cAAaA,EAAa,IAAIA,IAAe,KAC/DC,EAAAA,cAACQ,EAAAA,EAAS,KACNR,EAAAA,cAAAA,MAAAA,CAAKD,UAAU,iBAAgB,uBACP,8BAAQ,iBAAsB,KAEtDC,EAAAA,cAAAA,MAAAA,CAAKD,UAAU,eACXC,EAAAA,cAACS,EAAAA,EAAS,CAACC,UAAQ,GAAC,uCAK5BV,EAAAA,cAACQ,EAAAA,EAAS,KACNR,EAAAA,cAAAA,MAAAA,CAAKD,UAAU,gBAAgBY,GAAG,eAC9BX,EAAAA,cAAAA,KAAAA,KAAI,sCAAuC,oFAG/CA,EAAAA,cAAAA,MAAAA,CAAKD,UAAU,eACXC,EAAAA,cAACG,EAAM,KAAC,sBACRH,EAAAA,cAACS,EAAAA,EAAS,KA5EzB,8PA+EOT,EAAAA,cAACQ,EAAAA,EAAS,KACNR,EAAAA,cAAAA,MAAAA,CAAKD,UAAU,gBAAgBY,GAAG,OAC9BX,EAAAA,cAAAA,KAAAA,KAAI,oCAAqC,mEAG7CA,EAAAA,cAAAA,MAAAA,CAAKD,UAAU,eACXC,EAAAA,cAACG,EAAM,KAAC,YACRH,EAAAA,cAACS,EAAAA,EAAS,KAxDzB,0VA2DOT,EAAAA,cAACQ,EAAAA,EAAS,KACNR,EAAAA,cAAAA,MAAAA,CAAKD,UAAU,gBAAgBY,GAAG,SAC9BX,EAAAA,cAAAA,KAAAA,KAAI,sCAAuC,gGAG/CA,EAAAA,cAAAA,MAAAA,CAAKD,UAAU,eACXC,EAAAA,cAACG,EAAM,KAAC,YACRH,EAAAA,cAACS,EAAAA,EAAS,KAnFzB,qVAsFa,EAGdR,EAAUK,YAAc,YAExB,O,uECxGA,MAAME,GAA0CI,EAAAA,EAAAA,aAE9C,CAAC,EAAmCC,KAAG,IAAtC,SAAET,EAAQ,UAAEL,KAAcM,GAAO,SAChCL,EAAAA,cAAAA,MAAAA,OAAAA,OAAAA,CACIc,KAAK,aACAT,EAAK,CACVN,UAAa,aAAYA,EAAa,IAAIA,IAAe,IACzDc,IAAMA,IAEJE,EAAAA,SAASC,IAAKZ,GAAUa,GAAKA,IAC7B,IAGVT,EAAUF,YAAc,YAExB,O","sources":["webpack://auto-immutable-docs/./src/pages/getting-started.tsx","webpack://auto-immutable-docs/./src/partials/contents/start-page/component.tsx","webpack://auto-immutable-docs/./src/partials/paragraph/component.tsx"],"sourcesContent":["import type { HeadFC } from 'gatsby';\n\nimport type { PageProps } from '../page-context';\n\nimport React from 'react';\n\nimport StartPage from \"../partials/contents/start-page\";\n\nconst GettingStartedPage : React.FC<PageProps> = ({ className }) => (\n    <article className={ `getting-started-page ${ className }` }>\n        <h1>Getting Started</h1>\n        <StartPage />\n    </article>\n);\n\nexport default GettingStartedPage;\n\nexport const Head : HeadFC = () => (\n    <title>Getting Started</title>\n);\n","import React from 'react';\n\nimport CodeBlock from '../../code-block';\nimport Paragraph from '../../paragraph';\n\nimport './style.scss';\n\nconst INSTANTIATE_SAMPLE =\n`import AutoImmutable from 'auto-immutable';\n\nexport interface SampleValue {\n    property?: {\n        value: number;\n    }\n};\n\nconst initValue : SampleValue = {}; // any object really!\n\nexport const sample = new AutoImmutable( initValue );`;\n\nconst SHARING_SAMPLE =\n`import { sample } from 'sample-instance';\n\nconst data = sample.connect();\n\nconsole.log( data.get( 'property.value' ) ); // logs: 44\n\ndata.set({\n    property: {\n        value: 127\n    }\n});\n\nconsole.log( data.get( 'property.value' ) ); // logs: 127\n\ndata.disconnect(); // severs access to the sample AutoImmutable instance`;\n\nconst USING_SAMPLE =\n`import { sample } from 'sample-instance';\n\nconst data = sample.connect();\n\nconsole.log( data.get( 'property.value' ) ); // logs: undefined\n\ndata.set({\n    property: {\n        value: 44\n    }\n});\n\nconsole.log( data.get( 'property.value' ) ); // logs: 44\n\ndata.disconnect(); // severs access to the sample AutoImmutable instance`;\n\nconst Header : React.FC<{\n    children: React.ReactNode,\n    id?: string\n}> = ({ children, ...props }) => (\n    <header { ...props }>\n        { children }\n    </header>\n);\n\nHeader.displayName = 'StartPage.Header';\n\nconst StartPage : React.FC<{className? : string}> = ({ className }) => (\n    <article className={ `start-page${ className ? ` ${ className }` : '' }` }>\n        <Paragraph>\n            <div className=\"snippet-intro\">\n                Begin by installing <strong>AutoImmutable</strong>.\n            </div>\n            <div className=\"snippet-box\">\n                <CodeBlock isInline>\n                    npm install --save auto-immutable\n                </CodeBlock>\n            </div>\n        </Paragraph>\n        <Paragraph>\n            <div className=\"snippet-intro\" id=\"instantiate\">\n                <h3>Creating an AutoImmutable instance</h3>\n                To create an AutoImmutable instance, simply instantiate the AutoImmutable class.\n            </div>\n            <div className=\"snippet-box\">\n                <Header>sample-instance.js</Header>\n                <CodeBlock>{ INSTANTIATE_SAMPLE }</CodeBlock>\n            </div>\n        </Paragraph>\n        <Paragraph>\n            <div className=\"snippet-intro\" id=\"use\">\n                <h3>Using the AutoImmutable instance</h3>\n                Once instantiated, the new instance can be exported and reused.\n            </div>\n            <div className=\"snippet-box\">\n                <Header>user1.js</Header>\n                <CodeBlock>{ USING_SAMPLE }</CodeBlock>\n            </div>\n        </Paragraph>\n        <Paragraph>\n            <div className=\"snippet-intro\" id=\"share\">\n                <h3>Sharing the AutoImmutable instance</h3>\n                Once instantiated, all connections read and write to the same underlying AutoImmutable data.\n            </div>\n            <div className=\"snippet-box\">\n                <Header>user2.js</Header>\n                <CodeBlock>{ SHARING_SAMPLE }</CodeBlock>\n            </div>\n        </Paragraph>\n    </article>\n);\n\nStartPage.displayName = 'StartPage';\n\nexport default StartPage;\n","import type { NamedExoticComponent } from 'react';\n\nimport React, { Children, forwardRef } from 'react';\n\nimport './style.scss';\n\nexport type Props = JSX.IntrinsicElements[ \"div\" ];\n\nconst Paragraph : NamedExoticComponent<Props> = forwardRef<\n    HTMLDivElement, Props\n>(({ children, className, ...props }, ref ) => (\n    <div\n        role=\"paragraph\"\n        { ...props }\n        className={ `paragraph${ className ? ` ${ className }` : '' }` }\n        ref={ ref }\n    >\n        { Children.map( children, c => c ) }\n    </div>\n));\n\nParagraph.displayName = 'Paragraph';\n\nexport default Paragraph;"],"names":["_ref","className","React","StartPage","Head","Header","children","props","displayName","_ref2","Paragraph","CodeBlock","isInline","id","forwardRef","ref","role","Children","map","c"],"sourceRoot":""}