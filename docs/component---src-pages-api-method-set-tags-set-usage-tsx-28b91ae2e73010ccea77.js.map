{"version":3,"file":"component---src-pages-api-method-set-tags-set-usage-tsx-28b91ae2e73010ccea77.js","mappings":"sOA0GA,UAjBqDA,IAAA,IAAC,UAAEC,GAAW,SAChEC,EAAAA,cAAAA,UAAAA,CAASD,UAAa,+BAA+BA,KAChDC,EAAAA,cAAAA,KAAAA,KAAI,mBACJA,EAAAA,cAAAA,SAAAA,KAAQ,gBACRA,EAAAA,cAAAA,MAAAA,KAAQ,sBACRA,EAAAA,cAACC,EAAAA,EAAS,KAAG,IAAK,KAClBD,EAAAA,cAAAA,SAAAA,KAAQ,gBACRA,EAAAA,cAAAA,MAAAA,KAAQ,iDACRA,EAAAA,cAACC,EAAAA,EAAS,CAACC,GAAG,WAAU,+CACxBF,EAAAA,cAACC,EAAAA,EAAS,KAAC,qJACXD,EAAAA,cAACC,EAAAA,EAAS,KAAC,iBAAc,8BAAQD,EAAAA,cAACG,EAAAA,EAAM,CAACC,GAAG,sCAAqC,cAA2B,kFAC5GJ,EAAAA,cAACC,EAAAA,EAAS,KAAC,sDAAmD,4BAAM,aAAgB,qEACpFD,EAAAA,cAAAA,KAAAA,KAAI,YACJA,EAAAA,cAACK,EAAAA,EAAS,KAzFjB,otDA0Fa,EAKP,MAAMC,EAAgB,IACzBN,EAAAA,cAAAA,QAAAA,KAASO,EAAAA,QAASC,MAAO,U,uECrG7B,MAAMP,GAA0CQ,EAAAA,EAAAA,aAE9C,CAAC,EAAmCC,KAAG,IAAtC,SAAEC,EAAQ,UAAEZ,KAAca,GAAO,SAChCZ,EAAAA,cAAAA,MAAAA,OAAAA,OAAAA,CACIa,KAAK,aACAD,EAAK,CACVb,UAAa,aAAYA,EAAa,IAAIA,IAAe,IACzDW,IAAMA,IAEJI,EAAAA,SAASC,IAAKJ,GAAUK,GAAKA,IAC7B,IAGVf,EAAUgB,YAAc,YAExB,O","sources":["webpack://auto-immutable-docs/./src/pages/api/method/set/tags/set-usage.tsx","webpack://auto-immutable-docs/./src/partials/paragraph/component.tsx"],"sourcesContent":["import type { HeadFC } from 'gatsby';\n\nimport type { PageProps } from '../../../../../page-context';\n\nimport React from 'react';\n\nimport metadata from '../../../../../../gatsby-config/metadata';\n\nimport Anchor from '../../../../../partials/anchor';\nimport CodeBlock from '../../../../../partials/code-block';\nimport Paragraph from '../../../../../partials/paragraph';\n\nconst SAMPLE =\n`import AutoImmutable, { Tag } from 'auto-immutable';\n\nconst protectedData = {\n    a: {\n        b: [\n            { x: 7, y: 8, z: 9 },\n            { x: 17, y: 18, z: 19 }\n        ]\n    },\n    j: 10\n};\n\nconst aImmutable = new AutoImmutable( protectedData );\nconst consumer = aImmutable.connect();\n\n/* rewrites aImmutable data to { ...aImmutable data, a: 'Demo', j: 17 } */\nconsumer.set({\n    [ Tag.SET ]: currentValue => ({\n        ...currentValue,\n        a: 'Demo',\n        j: 17\n    })\n});\n\n/* rewrites aImmutable data.a to { ...aImmutable data, message: 'Testing...' } */\nconsumer.set({\n    a: {\n        [ Tag.SET ]: currentValue => ({\n            ...currentValue,\n            message: 'Testing...'\n        })\n    }\n});\n\n//  rewrites aImmutable data.a.b[1] to { x: 97, y: 98, z: 99 };\n//  leaving aImmutable data.a.b = [\n//       { x: 7, y: 8, z: 9 },\n//       { x: 97, y: 98, z: 99 }\n//  ]\nconsumer.set({\n    a: {\n        b: [\n            aImmutable data.a.b[ 0 ],\n            {\n                [ Tag.SET ]: currentValue => ({\n                    ...currentValue,\n                    x: 97,\n                    y: 98,\n                    z: 99\n                })\n            }\n        ]\n    }\n});\n\n//  rewrites aImmutable data.a.b[1] to { x: 97, y: 98, z: 99 };\n//  leaving aImmutable data.a.b = [\n//     { x: 7, y: 8, z: 9 },\n//     { x: 97, y: 98, z: 99 }\n//  ]\n//  uses indexing (RECOMMENDED)\nconsumer.set({\n    a: {\n        b: {\n            1: {\n                [ Tag.SET ]: currentValue => ({\n                    ...currentValue,\n                    x: 97,\n                    y: 98,\n                    z: 99\n                })\n            }\n        }\n    }\n});`;\n\nconst SetMethodApiSetTagPage : React.FC<PageProps> = ({ className }) => (\n   <article className={ `set-method-api-set-tag-page ${ className }` }>\n        <h1>@@SET Tag Usage</h1>\n        <strong>Signature 1:</strong>\n        <pre>{ `{ '@@SET': <any> }` }</pre>\n        <Paragraph>{ ' ' } </Paragraph>\n        <strong>Signature 2:</strong>\n        <pre>{ `{ '@@SET': ( currentValue: <any> ) => <any> }` }</pre>\n        <Paragraph id=\"purpose\">This tag is mainly for handling edge cases.</Paragraph>\n        <Paragraph>Please use sparingly. In most cases, calling the consumer.set(...) method with or without any of the other tags is sufficient and most efficient.</Paragraph>\n        <Paragraph>This and the '<strong><Anchor to=\"/api/method/set/tags/replace-usage\">@@REPLACE</Anchor></strong>' tag are functionally equivalent when used with a replacement value argument.</Paragraph>\n        <Paragraph>Be aware that the compute function argument may be <code>undefined</code> for properties which do not yet exist in the AutoImmutable data.</Paragraph>\n        <h4>Example:</h4>\n        <CodeBlock>{ SAMPLE }</CodeBlock>\n    </article>\n);\n\nexport default SetMethodApiSetTagPage;\n\nexport const Head : HeadFC = () => (\n    <title>{ metadata.title }: @@SET</title>\n);\n","import type { NamedExoticComponent } from 'react';\n\nimport React, { Children, forwardRef } from 'react';\n\nimport './style.scss';\n\nexport type Props = JSX.IntrinsicElements[ \"div\" ];\n\nconst Paragraph : NamedExoticComponent<Props> = forwardRef<\n    HTMLDivElement, Props\n>(({ children, className, ...props }, ref ) => (\n    <div\n        role=\"paragraph\"\n        { ...props }\n        className={ `paragraph${ className ? ` ${ className }` : '' }` }\n        ref={ ref }\n    >\n        { Children.map( children, c => c ) }\n    </div>\n));\n\nParagraph.displayName = 'Paragraph';\n\nexport default Paragraph;"],"names":["_ref","className","React","Paragraph","id","Anchor","to","CodeBlock","Head","metadata","title","forwardRef","ref","children","props","role","Children","map","c","displayName"],"sourceRoot":""}